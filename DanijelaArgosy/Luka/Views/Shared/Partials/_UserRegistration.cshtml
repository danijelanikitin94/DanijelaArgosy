@using Argosy.BusinessLogic.Extensions
@using Argosy.BusinessLogic.FrontEnd.Security
@model Argosy.Web.FrontEnd.Models.LoginViewModel
<style>
    .validation-summary-errors {
        font-weight: bold !important;
        color: #a94442 !important;
        background-color: #f2dede;
        border-color: #ebccd1;
        border-radius: 4px;
        min-height: 50px;
        padding-top: 15px;
        padding-left: 22px;
    }
</style>
<h2>~{RegisterNewUser}~</h2>
<p>~{CompleteRegistrationForm}~</p>
@using (Ajax.BeginForm("UserRegistration", new { controller = "Register", area = "" }, new AjaxOptions() { HttpMethod = "Post",AllowCache = false, InsertionMode = InsertionMode.Replace, OnSuccess = "saveUser(data)" }, new { id = "userRegForm" }))
{
    <div class="alert alert-success hidden" id="divSuccessRegistration"></div>
    @Html.AntiForgeryToken()
    if (Model.Details.DoNotUseModal)
    {
        @Html.ValidationSummary()
    }
    <div class="fancy800 hide-x-overflow" id="newUserDiv">
        <div class="info clear">
            <div class="form registerform">
                <div class="col_half padu40">
                    @Html.EditorFor(m => m.RegistrationUser.User.Username, "NewString")
                    @Html.EditorFor(m => m.RegistrationUser.User.DivisionName, "NewString", new { required = Model.RequireCompanyName, requiredMessage = Model.RequireCompanyName ? "The Company Name field is required" : ""})
                    @Html.EditorFor(m => m.RegistrationUser.User.Email, "NewString")
                    @Html.EditorFor(m => m.RegistrationUser.User.FirstName, "NewString")
                    @Html.EditorFor(m => m.RegistrationUser.User.LastName, "NewString")
                    @{
                        if (Model.RegistrationUser.AccessCodeRequired)
                        {
                            @Html.EditorFor(m => m.RegistrationUser.User.AccessCode, "Password")
                        }
                    }
                    @Html.EditorFor(m => m.RegistrationUser.User.Password, "Password")
                    @Html.EditorFor(m => m.RegistrationUser.User.ConfirmPassword, "Password")
                </div>
                <div class="col_half col_last">
                    <p class="h4-invoice padu10 padb10">
                        ~{AddressInformation}~
                    </p>
                    @Html.EditorFor(m => m.RegistrationUser.User.Address1, "NewString")
                    @Html.EditorFor(m => m.RegistrationUser.User.Address2, "NewString")
                    @Html.EditorFor(m => m.RegistrationUser.User.Address3, "NewString")
                    @Html.EditorFor(m => m.RegistrationUser.User.City, "NewString")
                    @Html.EditorFor(m => m.RegistrationUser.User.StateId, "State", new { BindingGroup = "RegistrationUser_User", Model.RegistrationUser.User.CountryId })
                    @Html.EditorFor(m => m.RegistrationUser.User.ZipCode, "NewString")
                    @Html.EditorFor(m => m.RegistrationUser.User.CountryId, "Country", new { BindingGroup = "RegistrationUser_User" })
                    @Html.EditorFor(m => m.RegistrationUser.User.PhoneNumber, "Telephone")
                    @Html.HiddenFor(m => m.RegistrationUser.User.SiteId)
                    @Html.HiddenFor(m => m.RegistrationUser.User.CompanyId)
                    @Html.HiddenFor(m => m.RegistrationUser.IsOpenStoreFront)
                    @Html.HiddenFor(m => m.RegistrationUser.DefaultUserId)
                    @Html.HiddenFor(m => m.RegistrationUser.SiteContactEmail)
                    @Html.HiddenFor(m => m.Details.DoNotUseModal)
                    @Html.HiddenFor(m => m.OriginalUserId)
                    @Html.HiddenFor(a => a.ReturnUrl)
                </div>
            </div>
        </div>
    </div>
    <div class="center padu10">
        <input type="submit" style="z-index: 9999" class="btn btn-primary upcase defaultButton" value="Register" id="registerFormBtn" name="registerFormBtn" />
    </div>
    <script>
        $(function () {
            $("#registerFormBtn").click(function (e) {
                e.preventDefault();
                $(document).trigger(argosyEvents.START_LOADING, { element: $(".fancybox-wrap"), message: "~{MsgRegistering}~" });
                validateAccessCode();
            });
        });

        function validateAccessCode() {
            var accessCode = $('#@Html.IdFor(m=>m.RegistrationUser.User.AccessCode)').val();
            var companyId = $('#@Html.IdFor(m=>m.RegistrationUser.User.CompanyId)').val();
            var url = '@Url.Action("CheckOpenStoreFrontAccessCode",new {controller="Users", area="Admin"})';
            var model = {
                accessCode: accessCode,
                companyId: companyId
            };

            $.ajax({
                url: url,
                type: "POST",
                dataType: "json",
                data: JSON.stringify(model),
                contentType: "application/json; charset=utf-8",
                success: function (result) {
                    var accessSelector = '[data-valmsg-for="RegistrationUser.User.AccessCode"]',
                        form = $('#userRegForm'),
                        msg = 'Access Code is invalid.';

                    var validForm = form.valid();
                    validateElement(accessSelector, result.canAccess, msg);

                    if (validForm === true && result.canAccess === true) {
                        $(document).trigger(argosyEvents.REGISTRATION_FIRED);
                        $('#registerFormBtn').submit();
                    }
                    $(document).trigger(argosyEvents.END_LOADING, { element: $(".fancybox-wrap")});
                }
            });
        }

        function validateElement(selector, valid, msg) {
            var validElement = $(selector);
            if (valid === true) {
                validElement.addClass('field-validation-valid').removeClass('field-validation-error').children().remove();
            } else {
                validElement.removeClass('field-validation-valid')
                    .addClass('field-validation-error')
                    .append('<span>' + msg + '</span>');
            }
        }

        function saveUser(data) {
            unblock($('#userRegForm'));
            $.fancybox.close();
            
            if (data.RenderedView != null && data.RenderedView.length > 0) {

                if (data.DoNotUseModal) {
                    $("#_userRegPartialArea").html(data.RenderedView);
                }
                else {
                    $.fancybox({
                        content: data.RenderedView,
                        beforeShow: function() {
                            var alertDiv = this.wrap.find("#divSuccessRegistration");
                            if (data.Message != null && data.Message.length > 0) {
                                alertDiv.html(data.Message);
                                alertDiv.removeClass("alert-success").addClass("alert-danger").removeClass("hidden");
                            }
                        }
                    });
                }
            } else if (data.Message != null && data.Message.length > 0) {
                prompt.alert({
                    question: data.Message,
                    type: "success"
                });
            } else {
                window.location = data.TransferPage;
            }
        }
    </script>
    }

